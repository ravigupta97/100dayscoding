Given a string s, determine if it is valid.

A string s is valid if, starting with an empty string t = "", you can transform t into s after performing the following operation any number of times:

Insert string "abc" into any position in t. More formally, t becomes tleft + "abc" + tright, where t == tleft + tright. Note that tleft and tright may be empty.
Return true if s is a valid string, otherwise, return false.

 

Example 1:

Input: s = "aabcbc"
Output: true
Explanation:
"" -> "abc" -> "aabcbc"
Thus, "aabcbc" is valid.
Example 2:

Input: s = "abcabcababcc"
Output: true
Explanation:
"" -> "abc" -> "abcabc" -> "abcabcabc" -> "abcabcababcc"
Thus, "abcabcababcc" is valid.
Example 3:

Input: s = "abccba"
Output: false
Explanation: It is impossible to get "abccba" using the operation.
Example 4:

Input: s = "cababc"
Output: false
Explanation: It is impossible to get "cababc" using the operation.
 

Constraints:

1 <= s.length <= 2 * 104
s consists of letters 'a', 'b', and 'c'











/*
Solved by traversing over the string and check that if we can transform the string into the original string or not if yes then return true else return false
*/















class Solution {
public:
    bool isValid(string s) {
        int i=0;
        while(i<s.size()){
            if(s[i]=='c'){
                if(i>=2 && s[i-1]=='b' && s[i-2]=='a'){
                    s = s.substr(0,i-2) + s.substr(i+1);
                }else{
                    return false;
                }
                i -= 3;
            }
            i++;
        }
        return i==0;
    }
};
