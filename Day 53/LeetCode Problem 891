Given an array of integers A, consider all non-empty subsequences of A.

For any sequence S, let the width of S be the difference between the maximum and minimum element of S.

Return the sum of the widths of all subsequences of A. 

As the answer may be very large, return the answer modulo 10^9 + 7.

 

Example 1:

Input: [2,1,3]
Output: 6
Explanation:
Subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].
The corresponding widths are 0, 0, 0, 1, 1, 2, 2.
The sum of these widths is 6.
 

Note:

1 <= A.length <= 20000
1 <= A[i] <= 20000






/*
Solved by firstly sorting the array and then adding the maximums number of times the item will be maximum
and then subtracting the minimums number of times this item will be minimum
*/






class Solution {
public:
    int sumSubseqWidths(vector<int>& A) {
        int mod = 1000000007;
        sort(A.begin(), A.end());
        long power = 1, output = 0;
        for(int i=0;i<A.size();i++){
            output = (output + A[i]*power)%mod;
            power = (power*2)%mod;
        }
        power = 1;
        for(int i=A.size()-1;i>=0;i--){
            output = (output - A[i]*power + mod)%mod;
            power = (power*2)%mod;
        }
        return (output+mod)%mod;
    }
};
