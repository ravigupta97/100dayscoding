Given a non-empty integer array, find the minimum number of moves required to make all array elements equal, where a move is incrementing a selected element by 1 or decrementing a selected element by 1.

You may assume the array's length is at most 10,000.

Example:

Input:
[1,2,3]

Output:
2

Explanation:
Only two moves are needed (remember each move increments or decrements one element):

[1,2,3]  =>  [2,2,3]  =>  [2,2,2]










/*
Solved by firstly sorting the array and then finding the median of the array and then using that median
calculate sum of difference of median and each element in array and this sum is minimum number of moves
*/









class Solution {
public:
    int minMoves2(vector<int>& nums) {
        int sum = 0;
        sort(nums.begin(),nums.end());
        int median = nums[nums.size()/2];
        
        for(int i=0;i<nums.size();i++){
            sum += abs(median - nums[i]);
        }
        return sum;
    }
};
