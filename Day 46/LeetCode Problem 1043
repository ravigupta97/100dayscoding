Given an integer array arr, you should partition the array into (contiguous) subarrays of length at most k. After partitioning, each subarray has their values changed to become the maximum value of that subarray.

Return the largest sum of the given array after partitioning.

 

Example 1:

Input: arr = [1,15,7,9,2,5,10], k = 3
Output: 84
Explanation: arr becomes [15,15,15,9,10,10,10]
Example 2:

Input: arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4
Output: 83
Example 3:

Input: arr = [1], k = 1
Output: 1
 

Constraints:

1 <= arr.length <= 500
0 <= arr[i] <= 109
1 <= k <= arr.length





/*
Solved by finding the sum of maximum subarray of size k and check for max value for each subarray of smaller length and 
add sum upto previous value and max value of that sub array times its size
*/





class Solution {
public:
    int maxSumAfterPartitioning(vector<int>& arr, int k) {
        int n = arr.size();
        vector<int> dp(n,0);
        dp[0] = 0;
        int maxi = -1;
        for(int i=0;i<k;i++){
            maxi = max(maxi, arr[i]);
            dp[i] = maxi*(i+1);
        }
        
        for(int i=k;i<n;i++){
            maxi = arr[i];
            for(int j=1;j<=k;j++){
                maxi = max(maxi, arr[i-j+1]);
                dp[i] = max(dp[i], maxi*j+dp[i-j]);
            }
        }
        return dp[n-1];
    }
};
