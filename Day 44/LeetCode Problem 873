A sequence X_1, X_2, ..., X_n is fibonacci-like if:

n >= 3
X_i + X_{i+1} = X_{i+2} for all i + 2 <= n
Given a strictly increasing array A of positive integers forming a sequence, find the length of the longest fibonacci-like subsequence of A.  If one does not exist, return 0.

(Recall that a subsequence is derived from another sequence A by deleting any number of elements (including none) from A, without changing the order of the remaining elements.  For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].)

 

Example 1:

Input: [1,2,3,4,5,6,7,8]
Output: 5
Explanation:
The longest subsequence that is fibonacci-like: [1,2,3,5,8].
Example 2:

Input: [1,3,7,11,12,14,18]
Output: 3
Explanation:
The longest subsequence that is fibonacci-like:
[1,11,12], [3,11,14] or [7,11,18].
 

Note:

3 <= A.length <= 1000
1 <= A[0] < A[1] < ... < A[A.length - 1] <= 10^9





/*
Solved by checking the condition for node (i,j), (j,k) that A[i]+A[j]=A[k] and solving like longest increasing subsesuences
*/






class Solution {
public:
    int lenLongestFibSubseq(vector<int>& A) {
        int N = A.size();
        unordered_map<int, int> dp;
        for (int i = 0; i < N; ++i)
            dp[A[i]] = i;

        unordered_map<int, int> longest;
        int output = 0;
        for (int k = 0; k < N; ++k)
            for (int j = 0; j < k; ++j) {
                if (A[k] - A[j] < A[j] && dp.count(A[k] - A[j])) {
                    int i = dp[A[k] - A[j]];
                    longest[j * N + k] = longest[i * N + j] + 1;
                    output = max(output, longest[j * N + k] + 2);
                }
            }

        if(output >= 3)
            return output;
        else
            return 0;
    }
};
