Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
Example:

Consider the following matrix:

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
Given target = 5, return true.

Given target = 20, return false.







/*
Solved by iterating over the rows and applying the binary search approach on each row as they are sorted and update the high value so as to reduce the search space
*/









class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if(matrix.size() == 0 || matrix[0].size() == 0)
            return false;
        
        int rows = matrix.size(), col = matrix[0].size();
        int low = 0, high = col-1;

        for(int i = 0; i < rows; i++){
            if(matrix[i][0] > target)
                break;

            int lo = low, hi = high;

            while(lo <= hi){
                int mid = (lo + hi)/2;

                if(matrix[i][mid] == target)
                    return true;
                else if(matrix[i][mid] < target)
                    lo = mid+1;
                else
                    hi = mid-1;
            }

            high = min(hi+1, col-1);
        }

        return false;      
    }
};
