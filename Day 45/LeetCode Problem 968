Given a binary tree, we install cameras on the nodes of the tree. 

Each camera at a node can monitor its parent, itself, and its immediate children.

Calculate the minimum number of cameras needed to monitor all nodes of the tree.

 

Example 1:


Input: [0,0,null,0,0]
Output: 1
Explanation: One camera is enough to monitor all nodes if placed as shown.
Example 2:


Input: [0,0,null,0,null,0,null,null,0]
Output: 2
Explanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.

Note:

The number of nodes in the given tree will be in the range [1, 1000].
Every node has value 0.




/*
Solved by using the dynamic programming approach and traversing the tree from top and place the camera to every neighbour of left and right child
*/






/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minCameraCover(TreeNode* root) {
        vector<int> output;
        output = minCamera(root);
        return min(output[1], output[2]);
    }
    
    vector<int> minCamera(TreeNode *root){
        if(root == NULL)
            return vector<int>{0,0,99999};
        
        vector<int> L = minCamera(root->left);
        vector<int> R = minCamera(root->right);
        int minL = min(L[1], L[2]);
        int minR = min(R[1], R[2]);
        
        int d0 = L[1]+R[1];
        int d1 = min(L[2] + minR, R[2] + minL);
        int d2 = min(L[0], minL) + min(R[0], minR) + 1;
        return vector<int>{d0, d1, d2};
    }
};
