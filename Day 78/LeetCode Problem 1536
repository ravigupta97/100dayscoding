Given an n x n binary grid, in one step you can choose two adjacent rows of the grid and swap them.

A grid is said to be valid if all the cells above the main diagonal are zeros.

Return the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid.

The main diagonal of a grid is the diagonal that starts at cell (1, 1) and ends at cell (n, n).

 

Example 1:


Input: grid = [[0,0,1],[1,1,0],[1,0,0]]
Output: 3
Example 2:


Input: grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]
Output: -1
Explanation: All rows are similar, swaps have no effect on the grid.
Example 3:


Input: grid = [[1,0,0],[1,1,0],[1,1,1]]
Output: 0
 

Constraints:

n == grid.length
n == grid[i].length
1 <= n <= 200
grid[i][j] is 0 or 1







/*
Solved by swapping any two adjacent elements so we first find the number of 0s at the end of each row and 
repeat these steps for all the index and update the swaps count which will be the answer.
*/








class Solution {
public:
    int minSwaps(vector<vector<int>>& grid) {
        int n=grid.size(),res=0;
        vector<int>a(n);
        for(int i=0 ; i<n ; i++)              
        {
            int j=n-1,cnt=0;
            while(j>=0 and grid[i][j]==0) {cnt++;j--;}
            a[i]=cnt;
        }
        for(int i=0 ; i<n ; i++)               
        {
            if(a[i]<n-1-i)
            {
                int j=i;
                while(j<n and a[j]<n-1-i) j++;
                if(j==n) return -1;
                while(i<j)
                {
                    swap(a[j],a[j-1]);
                    res++;
                    j--;
                }
            }
        }
        return res;
    }
};
