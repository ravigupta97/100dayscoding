Given a singly linked list, determine if it is a palindrome.

Example 1:

Input: 1->2
Output: false
Example 2:

Input: 1->2->2->1
Output: true
Follow up:
Could you do it in O(n) time and O(1) space?


/*
Solved by finding the mid and then reversing the list from mid to end and then comparing it with starting list
*/




/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        ListNode *fast = head, *slow = head;
        while(fast != NULL and fast->next !=NULL){
            fast = fast->next->next;
            slow = slow->next;
        }
        ListNode *l1 = head, *l2 = reverse(slow);
        
        while(l1 != NULL and l2 != NULL){
            if(l1->val != l2->val)
                return false;
            l1 = l1->next;
            l2 = l2->next;
        }
        return true;
    }
    
    ListNode *reverse(ListNode *head){
        ListNode *pre = NULL, *curr = head, *node = NULL;
        while(curr != NULL){
            node = curr->next;
            curr->next = pre;
            pre = curr;
            curr = node;
        }
        return pre;
    }
    
};
