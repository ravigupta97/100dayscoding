Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than or equal to the node's key.
The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
Both the left and right subtrees must also be binary search trees.
 

For example:
Given BST [1,null,2,2],

   1
    \
     2
    /
   2
 

return [2].

Note: If a tree has more than one mode, you can return them in any order.

Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).





/*
Solved by traversing the tree using inorder traversal and then finding the most frequently occured element by comparing with the successive element
*/





/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> output;
    int maxFreq = 0, curr = 0, pre = INT_MIN;
    vector<int> findMode(TreeNode* root) {
        inorder(root);
        return output;
    }
    
    void inorder(TreeNode *root){
        if(root == NULL)
            return;
        
        inorder(root->left);
        if(pre == root->val)
            curr++;
        else
            curr = 1;
        if(curr > maxFreq){
            output.clear();
            maxFreq = curr;
            output.push_back(root->val);
        }
        else if(curr == maxFreq)
            output.push_back(root->val);
        
        pre = root->val;
        inorder(root->right);
    }
};
