Given a singly linked list L: L0→L1→…→Ln-1→Ln,
reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…

You may not modify the values in the list's nodes, only nodes itself may be changed.

Example 1:

Given 1->2->3->4, reorder it to 1->4->2->3.
Example 2:

Given 1->2->3->4->5, reorder it to 1->5->2->4->3.



/*
Solved by using the approach that first split the list into two i.e. start to mid and second from mid to end then reverse the second list and then merge both the list
*/



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    void reorderList(ListNode* head) {
        if(head == NULL or head->next == NULL or head->next->next == NULL)
            return;
        ListNode *a = head, *b = head;
        while(a && b && b->next && b->next->next){
            a = a->next;
            b = b->next->next;
        }
        
        ListNode *mid = a->next;
        a->next = NULL;
        a = head;
        
        ListNode *b1 = mid, *b2, *b3;
        if(mid->next){
            b1 = mid;
            b2 = b1->next;
            while(b2){
                b3 = b2->next;
                b2->next = b1;
                b1 = b2;
                b2 = b3;
            }
            mid->next = NULL;
        }
        b = b1;
        
        ListNode *output = a;
        a = a->next;
        while(a and b){
            output->next = b;
            output = output->next;
            b = b->next;
            
            output->next = a;
            output = output->next;
            a = a->next;
        }
        if(a)
            output->next = a;
        if(b)
            output->next = b;
    }
};
