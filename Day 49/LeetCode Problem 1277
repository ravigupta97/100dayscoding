Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.

 

Example 1:

Input: matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
Output: 15
Explanation: 
There are 10 squares of side 1.
There are 4 squares of side 2.
There is  1 square of side 3.
Total number of squares = 10 + 4 + 1 = 15.
Example 2:

Input: matrix = 
[
  [1,0,1],
  [1,1,0],
  [1,1,0]
]
Output: 7
Explanation: 
There are 6 squares of side 1.  
There is 1 square of side 2. 
Total number of squares = 6 + 1 = 7.
 

Constraints:

1 <= arr.length <= 300
1 <= arr[0].length <= 300
0 <= arr[i][j] <= 1






/*
Solved by using the dynamic programming approach and adding all the squares that can be formed in the submatrix
*/







class Solution {
public:
    int countSquares(vector<vector<int>>& matrix) {
        int r = matrix.size();
        int c = matrix[0].size();
        
        vector<vector<int>> output(300,vector<int>(300,0));
        
        for(int i = 0; i < r; i++){
            for(int j = 0; j < c; j++){
                if(matrix[i][j] == 1){
                    output[i][j] = 1;
                }
            }
        }
        int sum = 0;
        for(int j = 0; j < c; j++){
           sum += output[0][j];
        }
        for(int i = 1; i < r; i++){
            sum += output[i][0];
        }
        for(int i = 1; i < r; i++){
            for(int j = 1; j < c; j++){
                if(output[i][j] > 0){
                    output[i][j] = min(min(output[i-1][j-1], output[i-1][j]), output[i][j-1]) + 1;
                    sum += output[i][j];
                }
            }
        }
        return sum;
    }
};
