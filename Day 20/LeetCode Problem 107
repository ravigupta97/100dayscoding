Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]




/*
Solved recursively traversing the tree in level order manner and storing the output in a vector and reverse the output then return
*/




/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
            vector<vector<int>> output;
        traversal(output, root, 0);
        reverse(output.begin(), output.end());
        return output;
    }
    
    void traversal(vector<vector<int>> &output, TreeNode* root, int height){
        if(!root)
            return;
        if((height+1)> output.size())
            output.push_back(vector<int> {});
        
        output[height].push_back(root->val);
        traversal(output, root->left, height+1);
        traversal(output, root->right, height+1);
    }
    
};
