Given an integer array arr and an integer k, modify the array by repeating it k times.

For example, if arr = [1, 2] and k = 3 then the modified array will be [1, 2, 1, 2, 1, 2].

Return the maximum sub-array sum in the modified array. Note that the length of the sub-array can be 0 and its sum in that case is 0.

As the answer can be very large, return the answer modulo 10^9 + 7.

 

Example 1:

Input: arr = [1,2], k = 3
Output: 9
Example 2:

Input: arr = [1,-2,1], k = 5
Output: 2
Example 3:

Input: arr = [-1,-2], k = 7
Output: 0
 

Constraints:

1 <= arr.length <= 10^5
1 <= k <= 10^5
-10^4 <= arr[i] <= 10^4





/*
Solved by usimg the approach that after 2 iterations maxsum will increase by same amount 
i.e frm iteration 2 to 3 same as 3 to 4 therefore  we find what this difference is and multiply accordingly 
*/





class Solution {
public:
    int kConcatenationMaxSum(vector<int>& arr, int k) {
        int mod = 1000000007;
        int firstMaxSum = 0;
        int secondMaxSum = 0;
        int maxSum = 0;
        int sum = 0;
        for(int i=0;i<3;i++){
            for(int x: arr){
                sum = max(0, sum+x%mod);
                maxSum = max(maxSum, sum);
            }
            if(i == 0)
                firstMaxSum = maxSum;
            else if(i == 1)
                secondMaxSum = maxSum;
        }
        long long diff = maxSum - secondMaxSum;
        return secondMaxSum + ((diff*(k-2)) % mod);
    }
};
