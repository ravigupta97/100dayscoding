Given a linked list, swap every two adjacent nodes and return its head.

You may not modify the values in the list's nodes, only nodes itself may be changed.

 

Example:

Given 1->2->3->4, you should return the list as 2->1->4->3.




/*
Solved by swaping the current node with the next node and rearranging the pointers then move to next pair untill reaches end
*/



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if(head == NULL)
            return NULL;
        if(head->next == NULL)
            return head;
        ListNode *dummy = new ListNode(0), *node;
        node = dummy;
        dummy->next = head;
        while(head and head->next){
            ListNode *a = head->next;
            head->next = a->next;
            a->next = head;
            node->next = a;
            node = head;
            head = node->next;
        }
        return dummy->next;
    }
};
