Given an integer n. No-Zero integer is a positive integer which doesn't contain any 0 in its decimal representation.

Return a list of two integers [A, B] where:

A and B are No-Zero integers.
A + B = n
It's guarateed that there is at least one valid solution. If there are many valid solutions you can return any of them.

 

Example 1:

Input: n = 2
Output: [1,1]
Explanation: A = 1, B = 1. A + B = n and both A and B don't contain any 0 in their decimal representation.
Example 2:

Input: n = 11
Output: [2,9]
Example 3:

Input: n = 10000
Output: [1,9999]
Example 4:

Input: n = 69
Output: [1,68]
Example 5:

Input: n = 1010
Output: [11,999]
 

Constraints:

2 <= n <= 10^4









/*
Solved by traversing till the value of n and checking for the digits which can represent the number n as the sum of two numbers
*/







class Solution {
public:

	bool containsZero(int n){
		while(n){
			if(n%10 == 0)
                return false;
			n = n/10;
		}
		return true;
	}

	vector<int> getNoZeroIntegers(int n) {
		vector<int> ans(2,-1);
		for(int i=1;i<=n;i++){
			if(containsZero(i) && containsZero(n-i)){
				ans[0] = i;
				ans[1] = n-i;
				break;
			}
		}
		return ans;
	}
};
