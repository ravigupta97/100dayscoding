Given an array A of integers, return the number of (contiguous, non-empty) subarrays that have a sum divisible by K.

 

Example 1:

Input: A = [4,5,0,-2,-3,1], K = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by K = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
 

Note:

1 <= A.length <= 30000
-10000 <= A[i] <= 10000
2 <= K <= 10000





/*
Solved by creating a vector in which elements will be sum of previous element and element of at that poition and then find the count of suarray divisible by k
*/





class Solution {
public:
    int subarraysDivByK(vector<int>& A, int K) {
        vector<int> B(A.size()+1);
        for(int i=0;i<A.size();++i){
            B[i+1] = B[i] + A[i];
        }
        vector<int> count(K);
        for(int i: B)
            count[(i % K + K) % K]++;
        
        int output = 0;
        for(int i: count)
            output += i*(i-1)/2;
        
        return output;
    }
};
