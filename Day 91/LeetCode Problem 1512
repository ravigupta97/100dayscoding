Given an array of integers nums.

A pair (i,j) is called good if nums[i] == nums[j] and i < j.

Return the number of good pairs.

 

Example 1:

Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
Example 2:

Input: nums = [1,1,1,1]
Output: 6
Explanation: Each pair in the array are good.
Example 3:

Input: nums = [1,2,3]
Output: 0
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100







/*
Solved bytraversing the array and increasing res by its previous comulative frequency so far seen[n] and 
then increasing the frequency by 1 with seen[n]++ and then return the result
*/









class Solution {
public:
    int numIdenticalPairs(vector<int>& nums) {
        int res = 0, seen[101] = {};
        for (auto n: nums) {
            res += seen[n];
            seen[n]++;
        }
        return res;
    }
};
