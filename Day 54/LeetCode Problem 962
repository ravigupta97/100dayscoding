Given an array A of integers, a ramp is a tuple (i, j) for which i < j and A[i] <= A[j].  The width of such a ramp is j - i.

Find the maximum width of a ramp in A.  If one doesn't exist, return 0.

 

Example 1:

Input: [6,0,8,2,1,5]
Output: 4
Explanation: 
The maximum width ramp is achieved at (i, j) = (1, 5): A[1] = 0 and A[5] = 5.
Example 2:

Input: [9,8,1,0,1,9,4,0,4,1]
Output: 7
Explanation: 
The maximum width ramp is achieved at (i, j) = (2, 9): A[2] = 1 and A[9] = 1.
 

Note:

2 <= A.length <= 50000
0 <= A[i] <= 50000




/*
Solved by sorting the array and then finding the maximum of them and returning the maximum width
*/






class Solution {
public:
    static bool comp(pair<int, int> &a, pair<int, int> &b){
        return a.first == b.first ? a.second < b.second : a.first < b.first;
    }
    
    int maxWidthRamp(vector<int>& A) {
        vector<pair<int, int>> arr;
        
        for(int i=0;i<A.size();i++){
            arr.push_back({A[i], i});
        }
        
        sort(arr.begin(), arr.end(), comp);
        
        int res = 0;
        
        int i = 0, n = arr.size(), j = i+1;
        
        while(i < n){
            while(j < n && arr[j].second > arr[i].second){
                res = max(res, arr[j].second - arr[i].second);
                j++;
            }
            i++;
            if(j == i) j++;
        }
        return res;
    }
};
