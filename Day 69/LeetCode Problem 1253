Given the following details of a matrix with n columns and 2 rows :

The matrix is a binary matrix, which means each element in the matrix can be 0 or 1.
The sum of elements of the 0-th(upper) row is given as upper.
The sum of elements of the 1-st(lower) row is given as lower.
The sum of elements in the i-th column(0-indexed) is colsum[i], where colsum is given as an integer array with length n.
Your task is to reconstruct the matrix with upper, lower and colsum.

Return it as a 2-D integer array.

If there are more than one valid solution, any of them will be accepted.

If no valid solution exists, return an empty 2-D array.

 

Example 1:

Input: upper = 2, lower = 1, colsum = [1,1,1]
Output: [[1,1,0],[0,0,1]]
Explanation: [[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers.
Example 2:

Input: upper = 2, lower = 3, colsum = [2,2,1,1]
Output: []
Example 3:

Input: upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]
Output: [[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]
 

Constraints:

1 <= colsum.length <= 10^5
0 <= upper, lower <= colsum.length
0 <= colsum[i] <= 2







/*
Solved by accumulate the values in colsum array and check it whether it is equal to the summation of lower and upper. 
If it is not there is no solution Whenever there is 2 or 0 If the colsum is 1. So reduce it from the row with more rowsum (ie upper & lower)
*/








class Solution {
public:
     vector<vector<int>> reconstructMatrix(int upper, int lower, vector<int>& colsum) {
        vector<vector<int>> res(2);
        int sum = accumulate(colsum.begin(), colsum.end(), 0);
        if(sum != upper + lower) return {};
        
        for(int i = 0; i < colsum.size(); i++){
            if(colsum[i] == 0 || colsum[i] == 2){
                upper -= (colsum[i] / 2);
                lower -= (colsum[i] / 2);
                res[0].push_back(colsum[i] / 2); res[1].push_back(colsum[i] / 2);
                continue;
            }
            if(upper <= 0 && lower <= 0) return {};
            if(upper > lower){
                upper--;
                res[0].push_back(1);
                res[1].push_back(0);
            }
            else{
                lower--;
                res[0].push_back(0);
                res[1].push_back(1);
            }
        }
        return (upper > 0 || lower > 0) ? vector<vector<int>> () : res;
    }
};
