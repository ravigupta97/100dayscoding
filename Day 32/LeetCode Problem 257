Given a binary tree, return all root-to-leaf paths.

Note: A leaf is a node with no children.

Example:

Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3





/*
Solved by traversing the tree and push the nodes in the stack and traverse the path
*/





/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> output;
        if (root == NULL) return output;
        stack<TreeNode*> s;
        stack<string> path;
        s.push(root);
        path.push(to_string(root->val));
        
        while (!s.empty()) {
            TreeNode * curNode = s.top(); 
            s.pop();
            string tmpPath = path.top();
            path.pop();
            
            if (curNode->left == NULL && curNode->right == NULL) {
                output.push_back(tmpPath); 
                continue;
            }
            
            if (curNode->left != NULL) {
                s.push(curNode->left);
                path.push(tmpPath + "->" + to_string(curNode->left->val));
            }
            
            if (curNode->right != NULL) {
                s.push(curNode->right);
                path.push(tmpPath + "->" + to_string(curNode->right->val));
            }
        }
        
        return output;
    }
};
