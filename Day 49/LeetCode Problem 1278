You are given a string s containing lowercase letters and an integer k. You need to :

First, change some characters of s to other lowercase English letters.
Then divide s into k non-empty disjoint substrings such that each substring is palindrome.
Return the minimal number of characters that you need to change to divide the string.

 

Example 1:

Input: s = "abc", k = 2
Output: 1
Explanation: You can split the string into "ab" and "c", and change 1 character in "ab" to make it palindrome.
Example 2:

Input: s = "aabbc", k = 3
Output: 0
Explanation: You can split the string into "aa", "bb" and "c", all of them are palindrome.
Example 3:

Input: s = "leetcode", k = 8
Output: 0
 

Constraints:

1 <= k <= s.length <= 100.
s only contains lowercase English letters.






/*
Solved by traversing through the string and from the mid of the string check if is a palindrome or not and minimum number of changes to be done
*/






class Solution {
public:
    int palindromePartition(string s, int k) {
        int n = s.size();
        vector<vector<int>> dp(n, vector<int>(k, n));
        for (int t = 0; t < 2 * n; ++t)
            for (int l = t/2, r = (t+1)/2, q = 0; l >= 0 && r < n; --l, ++r) {
                if (s[l] != s[r]) q++;
                if (l == 0) dp[r][0] = q;
                else for (int i = 1; i < k; ++i)
                    dp[r][i] = min(dp[r][i], dp[l - 1][i - 1] + q);
            }
        return dp[n - 1][k - 1];
    }
};
