We partition a row of numbers A into at most K adjacent (non-empty) groups, then our score is the sum of the average of each group. What is the largest score we can achieve?

Note that our partition must use every number in A, and that scores are not necessarily integers.

Example:
Input: 
A = [9,1,2,3,9]
K = 3
Output: 20
Explanation: 
The best choice is to partition A into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.
We could have also partitioned A into [9, 1], [2], [3, 9], for example.
That partition would lead to a score of 5 + 2 + 6 = 13, which is worse.
 

Note:

1 <= A.length <= 100.
1 <= A[i] <= 10000.
1 <= K <= A.length.
Answers within 10^-6 of the correct answer will be accepted as correct.






/*
Solved by maintaining the vector for the averages of the array and use recursion to calculate the maximum sum of the averages by traversing in the loop
*/





class Solution {
public:
    double largestSumOfAverages(vector<int>& A, int K)
    {
        int n = A.size();
        vector<vector<double>> dp(K, vector<double>(n, 0.0));
        
        double curr = 0.0;
        for(int i = 0; i<n; i++){
            curr += (double)A[i]; 
            dp[0][i] = curr/(i+1);}
        
        for(int i = 1; i<K; i++)
            for(int j = i; j<n; j++)
            {
                dp[i][j] = dp[i-1][j-1] + (double)A[j];
                
                double curr = (double)A[j];
                
                for(int k = j-1; k>=i; k--)
                {
                    curr += (double)A[k];
                    dp[i][j] = max(dp[i][j], dp[i-1][k-1] + (curr/(j-k+1)));
                }
            }
        
        return dp[K-1][n-1];
    }
};
