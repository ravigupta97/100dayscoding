Given an array of integers nums, find the maximum length of a subarray where the product of all its elements is positive.

A subarray of an array is a consecutive sequence of zero or more values taken out of that array.

Return the maximum length of a subarray with positive product.

 

Example 1:

Input: nums = [1,-2,-3,4]
Output: 4
Explanation: The array nums already has a positive product of 24.
Example 2:

Input: nums = [0,1,-2,-3,-4]
Output: 3
Explanation: The longest subarray with positive product is [1,-2,-3] which has a product of 6.
Notice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive.
Example 3:

Input: nums = [-1,-2,-3,0,1]
Output: 2
Explanation: The longest subarray with positive product is [-1,-2] or [-2,-3].
Example 4:

Input: nums = [-1,2]
Output: 1
Example 5:

Input: nums = [1,2,3,5,-6,4,0,10]
Output: 4
 

Constraints:

1 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9








/*
Solved by traversing over the vetcor and checking for the maximum length of a subarray with positive product and return the length.
*/









class Solution {
public:
    int getMaxLen(vector<int>& nums){
        int ans=0,l=0,r=0,k=0,i,neg=0;
        for(i=0;i<nums.size();i++){
            if(nums[i]==0){
                if(neg%2==0)
                    ans=max(ans,i-k);
                else{
                    ans=max(ans,max(i-(l+1),r-k));
                }
                k=i+1;    
                neg=0;
            }
            else if(nums[i]<0){
                neg++;
                if(neg==1)
                    l=i;
                r=i;
            }
        }
        if(neg%2==0){
            ans=max(ans,i-k);
        }
        else{
            ans=max(ans,max(i-(l+1),r-k));
        }
        return ans;
    }
};
