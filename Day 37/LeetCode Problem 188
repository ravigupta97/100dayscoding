You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

Design an algorithm to find the maximum profit. You may complete at most k transactions.

Notice that you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
 

Constraints:

0 <= k <= 109
0 <= prices.length <= 104
0 <= prices[i] <= 1000





/*
Solved by using the dynamic programming approach and traversing the vector and calculating the maximum profit that can be attained
*/





class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        if(n<=1 or k<1)
            return 0;
        int temp = 0;
        int count = 0;
        
        for(int i=1;i<n;i++){
            if(prices[i] - prices[i-1] > 0){
                temp = temp + prices[i] - prices[i-1];
                count++;
            }
        }
        if(count < k)
            return temp;
        
        vector<int> currProfit(n, 0);
        vector<int> preProfit(n, 0);
        
        int lowCost;
        for(int i=0;i<k;i++){
            lowCost = prices[0];
            
            for(int j=1; j<n; j++){
                if(currProfit[j-1] < prices[j] - lowCost)
                    currProfit[j] = prices[j] - lowCost;
                else
                    currProfit[j] = currProfit[j-1];
                
                if(prices[j] - preProfit[j-1] < lowCost)
                    lowCost = prices[j] - preProfit[j-1];
            }
            preProfit = currProfit;
        }
        return currProfit[n-1];
    }
};
