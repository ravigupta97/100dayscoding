Find the sum of all left leaves in a given binary tree.

Example:

    3
   / \
  9  20
    /  \
   15   7

There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.




/*
Solved by recursively traversing the tree and checking if the left node exist then add to the sum 
*/





/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int sumOfLeftLeaves(TreeNode* root) {
        int sum = 0;
        
        if(!root)
            return 0;
        
        if(root->left and !root->left->left and !root->left->right)
            sum = root->left->val;
        
        return sumOfLeftLeaves(root->left) + sumOfLeftLeaves(root->right) + sum;
    }
};
