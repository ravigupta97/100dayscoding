Given alphanumeric string s. (Alphanumeric string is a string consisting of lowercase English letters and digits).

You have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. That is, no two adjacent characters have the same type.

Return the reformatted string or return an empty string if it is impossible to reformat the string.

 

Example 1:

Input: s = "a0b1c2"
Output: "0a1b2c"
Explanation: No two adjacent characters have the same type in "0a1b2c". "a0b1c2", "0a1b2c", "0c2a1b" are also valid permutations.
Example 2:

Input: s = "leetcode"
Output: ""
Explanation: "leetcode" has only characters so we cannot separate them by digits.
Example 3:

Input: s = "1229857369"
Output: ""
Explanation: "1229857369" has only digits so we cannot separate them by characters.
Example 4:

Input: s = "covid2019"
Output: "c2o0v1i9d"
Example 5:

Input: s = "ab123"
Output: "1a2b3"
 

Constraints:

1 <= s.length <= 500
s consists of only lowercase English letters and/or digits.









/*
Solved by travesing over the string and firstly check that it has digits or not if it does not have digits then return the empty string as it can not be reformatted 
otherwise find the permutation of the string in which no two adjacent characters have the same type.
*/










class Solution {
public:

    string reformat(string s) {
        string t,f,v;
        int l=0,d=0;
        for(int i=0;i<s.length();i++){
            if(isdigit(s[i])){
                d++;
                t+=s[i];
            }
            else{
                l++;
                f+=s[i];
            }
        }
        if(abs(d-l)>1) 
            return "";
    
        if(d>=l){
            for(int i=0;i<s.length();i++){
                if(i%2==0)
                    v+=t[i/2];
                else 
                    v+=f[(i-1)/2];
            }
            return v;
        }
        for(int i=0;i<s.length();i++){
            if(i%2==0) 
                v+=f[i/2];
            else
                v+=t[(i-1)/2];
            }
        return v;
    }
};
