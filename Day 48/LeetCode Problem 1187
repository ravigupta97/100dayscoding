Given two integer arrays arr1 and arr2, return the minimum number of operations (possibly zero) needed to make arr1 strictly increasing.

In one operation, you can choose two indices 0 <= i < arr1.length and 0 <= j < arr2.length and do the assignment arr1[i] = arr2[j].

If there is no way to make arr1 strictly increasing, return -1.

 

Example 1:

Input: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]
Output: 1
Explanation: Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7].
Example 2:

Input: arr1 = [1,5,3,6,7], arr2 = [4,3,1]
Output: 2
Explanation: Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7].
Example 3:

Input: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]
Output: -1
Explanation: You can't make arr1 strictly increasing.
 

Constraints:

1 <= arr1.length, arr2.length <= 2000
0 <= arr1[i], arr2[i] <= 10^9






/*
Solved by firstly sorting the arrays and then checking if one element is greater than that of other and then returning the minimum operations to make strictly increasing
*/





class Solution {
public:
    int makeArrayIncreasing(vector<int>& a, vector<int>& b) {
        int n=a.size(),m=b.size();
        sort(b.begin(),b.end());
        
        vector<vector<int>>dp(n,vector<int>(m+1,1e9));
        dp[0][0]=a[0];
        
        if(b[0]<a[0])
            dp[0][1]=b[0];
        
        if(is_sorted(a.begin(),a.end())==1)
            return 0;
        
        for(int i=1;i<n;i++)
            for(int j=1;j<m+1;j++){
                if(a[i]>dp[i-1][j])
                    dp[i][j]=min(dp[i][j],a[i]);
                if(*b.rbegin()>dp[i-1][j-1])
                    dp[i][j]=min(dp[i][j],*upper_bound(b.begin(),b.end(),dp[i-1][j-1]));
            }
        for(int i=1;i<m+1;i++)
            if(dp[n-1][i]!=1e9)
                return i;
        return -1;
    }
};
