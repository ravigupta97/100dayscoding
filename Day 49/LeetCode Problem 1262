Given an array nums of integers, we need to find the maximum possible sum of elements of the array such that it is divisible by three.

 

Example 1:

Input: nums = [3,6,5,1,8]
Output: 18
Explanation: Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3).
Example 2:

Input: nums = [4]
Output: 0
Explanation: Since 4 is not divisible by 3, do not pick any number.
Example 3:

Input: nums = [1,2,3,4,4]
Output: 12
Explanation: Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3).
 

Constraints:

1 <= nums.length <= 4 * 10^4
1 <= nums[i] <= 10^4




/*
Solved by using the dynamic programming approach and traversing through the array and checking that sum is divisible by 3 or not
*/






class Solution {
public:
    int maxSumDivThree(vector<int>& nums) {
        vector<vector<int>> dp(nums.size()+1, vector<int>(3));
        
        dp[0][0] = 0;
        dp[0][1] = INT_MIN;
        dp[0][2] = INT_MIN;
        
        for(unsigned int i=1;i<=nums.size();i++){
            int x = i-1;
            dp[i][0] = max(dp[i-1][0], dp[i-1][(nums[x])%3] + nums[x]);
            dp[i][1] = max(dp[i-1][1], dp[i-1][(nums[x]+1)%3] + nums[x]);
            dp[i][2] = max(dp[i-1][2], dp[i-1][(nums[x]+2)%3] + nums[x]);
        }
        return dp[nums.size()][0];
    }
};
