Given two integer arrays A and B, return the maximum length of an subarray that appears in both arrays.

Example 1:

Input:
A: [1,2,3,2,1]
B: [3,2,1,4,7]
Output: 3
Explanation: 
The repeated subarray with maximum length is [3, 2, 1].
 

Note:

1 <= len(A), len(B) <= 1000
0 <= A[i], B[i] < 100
 
 
 
 
 
 
 /*
 Solved by using the dynamic programming approach and saving the repeated part and recursively check for same elements in both arrays
 */
 
 
 
 
 
 class Solution {
public:
    int findLength(vector<int>& A, vector<int>& B) {
        int output = 0;
        int n = A.size();
        int m = B.size();
        vector<vector<int>> dp(n+1, vector<int>(m+1));
        for(int i=0;i<=n;i++){
            dp[i][0] = 0;
        }
        for(int i=0; i<=m; i++){
            dp[0][i] = 0;
        }
        
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                if(A[i-1] == B[j-1])
                    dp[i][j] = dp[i-1][j-1]+1;
                else
                    dp[i][j] = 0;
                output = max(output, dp[i][j]);
            }
        }
        return output;
    }
};
