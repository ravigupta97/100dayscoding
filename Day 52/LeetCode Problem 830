In a string s of lowercase letters, these letters form consecutive groups of the same character.

For example, a string like s = "abbxxxxzyy" has the groups "a", "bb", "xxxx", "z", and "yy".

A group is identified by an interval [start, end], where start and end denote the start and end indices (inclusive) of the group. In the above example, "xxxx" has the interval [3,6].

A group is considered large if it has 3 or more characters.

Return the intervals of every large group sorted in increasing order by start index.

 

Example 1:

Input: s = "abbxxxxzzy"
Output: [[3,6]]
Explanation: "xxxx" is the only large group with start index 3 and end index 6.
Example 2:

Input: s = "abc"
Output: []
Explanation: We have groups "a", "b", and "c", none of which are large groups.
Example 3:

Input: s = "abcdddeeeeaabbbcd"
Output: [[3,5],[6,9],[12,14]]
Explanation: The large groups are "ddd", "eeee", and "bbb".
Example 4:

Input: s = "aba"
Output: []
 

Constraints:

1 <= s.length <= 1000
s contains lower-case English letters only.






/*
Solved by traversing the string and identify the start and end of each group and if size of each group is atleast 3 then add to the answer
*/





class Solution {
public:
    vector<vector<int>> largeGroupPositions(string s) {
        vector<vector<int>> output;
        int l = 0, r = s.length();
        for(int i=0;i<r;i++){
            if(i == r-1 or s[i] != s[i+1]){
                if(i-l+1 >= 3)
                   output.push_back({l,i});
                l = i+1;
            }
        }
        return output;
    }
};
