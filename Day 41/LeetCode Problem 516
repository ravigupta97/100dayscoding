Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.

Example 1:
Input:

"bbbab"
Output:
4
One possible longest palindromic subsequence is "bbbb".
 

Example 2:
Input:

"cbbd"
Output:
2
One possible longest palindromic subsequence is "bb".
 

Constraints:

1 <= s.length <= 1000
s consists only of lowercase English letters.





/*
Solved by firstly reversing the string and then finding the longest common subsequence using the dynamic programming approach
*/







class Solution {
public:
    int dp[1003][1003];
    int longestPalindromeSubseq(string s) {
        string t = s;
        reverse(s.begin(), s.end());
        int n = s.size();
        for(int i=0; i<=n; i++){
            for(int j=0; j<=n; j++){
                if(i==0 or j==0)
                    dp[i][j] = 0;
                else
                {
                    if(t[i -1] == s[j -1])
                        dp[i][j] = 1 + dp[i-1][j-1];
                    else
                        dp[i][j] = max(dp[i][j-1], dp[i -1][j]);
                }
            }
        }
        return dp[n][n];
    }
};
