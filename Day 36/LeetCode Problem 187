All DNA is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T', for example: "ACGAATTCCG". When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.

Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.

 

Example 1:

Input: s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"
Output: ["AAAAACCCCC","CCCCCAAAAA"]
Example 2:

Input: s = "AAAAAAAAAAAAA"
Output: ["AAAAAAAAAA"]
 

Constraints:

0 <= s.length <= 105
s[i] is 'A', 'C', 'G', or 'T'.




/*
Solved by traversing over the string and then checking the substring of first 10 char is in the map or not 
*/







class Solution {
public:
   vector<string> findRepeatedDnaSequences(string s) {
        vector<string>res;
        unordered_map<string, int>m;
        for(int i = 0; i + 10 <= s.size(); i++){
            string seq = s.substr(i, 10);
            if(m[seq] == 1) res.push_back(seq);
            m[seq]++;
        }
        return res;
    }
};
