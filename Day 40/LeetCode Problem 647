Given a string, your task is to count how many palindromic substrings in this string.

The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.

Example 1:

Input: "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".
 

Example 2:

Input: "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".
 

Note:

The input string length won't exceed 1000.







/*
Solved by finding the middle of the string and form that position check if left char is equal to right char if yes then palindrome otherwise no
*/







class Solution {
public:
    int countSubstrings(string s) {
        int n = s.length(), output = 0;
        for(int i=0;i<2*n-1; ++i){
            int left = i/2;
            int right = left + i%2;
            while(left >=0 and right < n and s[left] == s[right]){
                output++;
                left--;
                right++;
            }
        }
        return output;
    }
};
