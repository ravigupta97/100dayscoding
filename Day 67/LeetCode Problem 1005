Given an array A of integers, we must modify the array in the following way: we choose an i and replace A[i] with -A[i], and we repeat this process K times in total.  (We may choose the same index i multiple times.)

Return the largest possible sum of the array after modifying it in this way.

 

Example 1:

Input: A = [4,2,3], K = 1
Output: 5
Explanation: Choose indices (1,) and A becomes [4,-2,3].
Example 2:

Input: A = [3,-1,0,2], K = 3
Output: 6
Explanation: Choose indices (1, 2, 2) and A becomes [3,1,0,2].
Example 3:

Input: A = [2,-3,-1,5,-4], K = 2
Output: 13
Explanation: Choose indices (1, 4) and A becomes [2,3,-1,5,4].
 

Note:

1 <= A.length <= 10000
1 <= K <= 10000
-100 <= A[i] <= 100







/*
Solved by sorting the vector and then traverse the vector if element is greater than or equal to 0, then break else negate its value
and then sort the vector again and  variable is less than K then calculate its difference, If the difference is not divisible by 2 then negate A[0].
*/








class Solution {
public:
    int largestSumAfterKNegations(vector<int>& A, int K) {
        sort(A.begin(), A.end());
        int i, t=0, n=A.size();
        
        for(i=0; i < min(n, K); i++) {
            if(A[t]>=0) break;
            
            else {
                A[t]=-A[t];
                t++;
            }
        }
        
        sort(A.begin(), A.end());
        if(i<K) {
            if((K-i)%2) {
                A[0]=-A[0];
            }
        }
        
        int sum=0;
        for(i=0; i<A.size(); i++) {
            sum += A[i];
        }
        return sum;
    }
};
