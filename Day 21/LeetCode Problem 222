Given a complete binary tree, count the number of nodes.

Note:

Definition of a complete binary tree from Wikipedia:
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.

Example:

Input: 
    1
   / \
  2   3
 / \  /
4  5 6

Output: 6





/*
Solved by using the binaryb search approach and counting the left nodes recursively and right nodes recursively
*/





/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int countNodes(TreeNode* root) {
        if(root == NULL)
            return 0;
        int lt = 0, rt = 0;
        TreeNode *l=root, *r=root;
        
        while(l){
            lt++;
            l=l->left;
        }
        while(r){
            rt++;
            r=r->right;
        }
        if(lt == rt)
            return pow(2,lt)-1;
        
        return countNodes(root->left)+countNodes(root->right)+1;
    }
};
