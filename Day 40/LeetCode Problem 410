Given an array nums which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays.

Write an algorithm to minimize the largest sum among these m subarrays.

 

Example 1:

Input: nums = [7,2,5,10,8], m = 2
Output: 18
Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.
Example 2:

Input: nums = [1,2,3,4,5], m = 2
Output: 9
Example 3:

Input: nums = [1,4,4], m = 3
Output: 4
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] <= 106
1 <= m <= min(50, nums.length)





/*
Solved by approach of binary search and travering the array and creating the subarray and returning the max sum between them
*/






class Solution {
public:
    int splitArray(vector<int>& nums, int m) {
        int maxi = INT_MIN, sum = 0;
        for(int i=0;i<nums.size();i++){
            sum += nums[i];
            maxi = max(maxi, nums[i]);
        }
        if(m == nums.size())
            return maxi;
        int l = maxi, r = sum, mid, ans;
        while(l<=r){
            mid = l + (r-l)/2;
            if(isValid(nums, mid, m)){
                ans = mid;
                r = mid-1;
            }
            else
                l = mid+1;
        }
        return ans;
    }
    
    bool isValid(vector<int> &nums, int mid, int m){
        int sum = 0, count = 1;
        for(int i=0;i<nums.size();i++){
            sum += nums[i];
            
            if(sum>mid){
                sum = nums[i];
                count++;
            }
        }
        if(count > m)
            return false;
        else 
            return true;
    }
};
