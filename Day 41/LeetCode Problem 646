You are given n pairs of numbers. In every pair, the first number is always smaller than the second number.

Now, we define a pair (c, d) can follow another pair (a, b) if and only if b < c. Chain of pairs can be formed in this fashion.

Given a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. You can select pairs in any order.

Example 1:
Input: [[1,2], [2,3], [3,4]]
Output: 2
Explanation: The longest chain is [1,2] -> [3,4]
Note:
The number of given pairs will be in the range [1, 1000]






/*
Solved by firstly sort the pairs and choosing the pair with second number smaller and keep adding pairs into the chain as long as second number of previous chain item is less than first number of current pair
*/





bool comparator(const vector<int>&a, const vector<int>&b)
{
    return a[1]<b[1];  
}
class Solution {
public:
    int findLongestChain(vector<vector<int>>& pairs) {
        int n = pairs.size();
        if(n==0) return 0;
        
        sort(pairs.begin(),pairs.end(),comparator);
        
        int maxl = 0;
        int prev = INT_MIN;
        for(int i=0;i<n;i++)
        {
            if(prev<pairs[i][0])
            {
                maxl++;
                prev = pairs[i][1];
            }
        }
        
        return maxl;
    }
};
