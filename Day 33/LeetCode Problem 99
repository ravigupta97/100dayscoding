Two elements of a binary search tree (BST) are swapped by mistake.

Recover the tree without changing its structure.

Example 1:

Input: [1,3,null,null,2]

   1
  /
 3
  \
   2

Output: [3,1,null,null,2]

   3
  /
 1
  \
   2
Example 2:

Input: [3,1,4,null,null,2]

  3
 / \
1   4
   /
  2

Output: [2,1,4,null,null,3]

  2
 / \
1   4
   /
  3
Follow up:

A solution using O(n) space is pretty straight forward.
Could you devise a constant space solution?





/*
Solved by traversing the array in inorder manner and finding the elements that are being swapped by mistake and then swap to recover the tree
*/





/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode *firstElement = NULL;
    TreeNode *secondElement = NULL;
    TreeNode *pre = NULL;
    
    void recoverTree(TreeNode* root) {
        traverse(root);
        int temp = firstElement->val;
        firstElement->val = secondElement->val;
        secondElement->val = temp;
    }
    
    void traverse(TreeNode *root){
        if(root == NULL)
            return;
        traverse(root->left);
        if(firstElement == NULL and (pre == NULL or pre->val >= root->val))
            firstElement = pre;
        if(firstElement != NULL and pre->val >= root->val)
            secondElement = root;
        
        pre = root;
        
        traverse(root->right);
    }
};
