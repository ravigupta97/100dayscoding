Given n orders, each order consist in pickup and delivery services. 

Count all valid pickup/delivery possible sequences such that delivery(i) is always after of pickup(i). 

Since the answer may be too large, return it modulo 10^9 + 7.

 

Example 1:

Input: n = 1
Output: 1
Explanation: Unique order (P1, D1), Delivery 1 always is after of Pickup 1.
Example 2:

Input: n = 2
Output: 6
Explanation: All possible orders: 
(P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).
This is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2.
Example 3:

Input: n = 3
Output: 90
 

Constraints:

1 <= n <= 500






/*
Solved by multiplying the number with 2n * (2n -1) which would eventually be equal to (2n)! and 
only half of those permutations would be valid, so we need to multiply with: 2n * (2n - 1) / 2 => n*(2n - 1)
*/










class Solution {
public:
    int countOrders(int n) {
        int mod = 1000000007;
        int x = n*2;
        long long res = 1;
        for(int i=x;i>1;i--){
            res = res * i;
            while(res % 2 == 0 and n>0){
                res = res/2;
                --n;
            }
            res = res % mod;
        }
        return (int)res;
    }
};
