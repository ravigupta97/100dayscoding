Given an array A of integers, for each integer A[i] we may choose any x with -K <= x <= K, and add x to A[i].

After this process, we have some array B.

Return the smallest possible difference between the maximum value of B and the minimum value of B.

 

Example 1:

Input: A = [1], K = 0
Output: 0
Explanation: B = [1]
Example 2:

Input: A = [0,10], K = 2
Output: 6
Explanation: B = [2,8]
Example 3:

Input: A = [1,3,6], K = 3
Output: 0
Explanation: B = [3,3,3] or B = [4,4,4]
 

Note:

1 <= A.length <= 10000
0 <= A[i] <= 10000
0 <= K <= 10000











/*
Solved by checking for the base condition that when size of array is 1 then return 0 and otherwise
calculate the maximum and minimum element of the vector i.e. a and b and if a-b>2k then return a-b-2k else 0
*/










class Solution {
public:
    int smallestRangeI(vector<int>& A, int k) {
        int n= A.size();
        if(n==1)
            return 0;
        int a = *max_element(A.begin(), A.end());
        int b = *min_element(A.begin(), A.end());
        if(a - b > (2*k) ){
            return a - b - 2*k;
        }else{
            return 0;
        }
    }
};
