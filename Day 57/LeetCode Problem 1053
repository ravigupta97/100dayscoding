Given an array A of positive integers (not necessarily distinct), return the lexicographically largest permutation that is smaller than A, that can be made with one swap (A swap exchanges the positions of two numbers A[i] and A[j]).  If it cannot be done, then return the same array.

 

Example 1:

Input: [3,2,1]
Output: [3,1,2]
Explanation: Swapping 2 and 1.
Example 2:

Input: [1,1,5]
Output: [1,1,5]
Explanation: This is already the smallest permutation.
Example 3:

Input: [1,9,4,6,7]
Output: [1,7,4,6,9]
Explanation: Swapping 9 and 7.
Example 4:

Input: [3,1,1,3]
Output: [1,3,1,3]
Explanation: Swapping 1 and 3.
 

Note:

1 <= A.length <= 10000
1 <= A[i] <= 10000







/*
Solved by using the approach that keep decrementing until get the element greater than 1 or more elements on the right 
and till we get smaller element then A[r] and swap the elements to get the permutation
*/





class Solution {
public:
    vector<int> prevPermOpt1(vector<int>& A) {
        if(A.size() == 1)
            return A;
        int r = A.size()-1;
        while(r>0 and A[r] >= A[r-1])
            r--;
        if(r == 0)
            return A;
        r--;
        int rCheck = A.size()-1;
        while(A[rCheck] >= A[r])
            rCheck--;
        int temp = A[rCheck];
        A[rCheck] = A[r];
        A[r] = temp;
        return A;
    }
};
