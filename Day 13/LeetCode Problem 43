Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Example 1:

Input: num1 = "2", num2 = "3"
Output: "6"
Example 2:

Input: num1 = "123", num2 = "456"
Output: "56088"
Note:

The length of both num1 and num2 is < 110.
Both num1 and num2 contain only digits 0-9.
Both num1 and num2 do not contain any leading zero, except the number 0 itself.
You must not use any built-in BigInteger library or convert the inputs to integer directly.



/*
Solved by multiplying one digit at a time and building the output and then removing the leading zeros
*/


class Solution {
public:
    string multiply(string num1, string num2) {
        int m = num1.length(), n = num2.length();
        vector<int> prod(m+n,0);
        string output = "";
        if(num1 == "0" or num2 == "0")
            return "0";
        
        for(int i=m-1;i>=0;--i){
            for(int j=n-1;j>=0;--j){
                prod[i+j+1] += (num1[i] - '0') * (num2[j] - '0');
                prod[i+j] += prod[i+j+1]/10;
                prod[i+j+1] %= 10;
            }
        }
        int i=0;
        while(i<prod.size() and prod[i] == 0)
            ++i;
        while(i<prod.size())
            output.push_back(prod[i++]+'0');
        return output;
    }
};
