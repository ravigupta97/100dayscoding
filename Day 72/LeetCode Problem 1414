Given an integer k, return the minimum number of Fibonacci numbers whose sum is equal to k. The same Fibonacci number can be used multiple times.

The Fibonacci numbers are defined as:

F1 = 1
F2 = 1
Fn = Fn-1 + Fn-2 for n > 2.
It is guaranteed that for the given constraints we can always find such Fibonacci numbers that sum up to k.
 

Example 1:

Input: k = 7
Output: 2 
Explanation: The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ... 
For k = 7 we can use 2 + 5 = 7.
Example 2:

Input: k = 10
Output: 2 
Explanation: For k = 10 we can use 2 + 8 = 10.
Example 3:

Input: k = 19
Output: 3 
Explanation: For k = 19 we can use 1 + 5 + 13 = 19.
 

Constraints:

1 <= k <= 10^9








/*
Solved by creating a vector in which we store the Fibonacci series till the k and then traversing the array and then finding the count of numbers having sum equal to k
*/








class Solution {
public:
    int findMinFibonacciNumbers(int k) {
        vector<int> f = {1,1};
        for(int i=2; i<=k; i++) {
            int x = f[i-1] + f[i-2];
            if(x > k) break;
            f.push_back(x);
        }
        int c = 0;
		for(int i=f.size()-1; i>-1; i--)
            if(f[i] <= k) c++, k-=f[i];
        return c;
    }
};
