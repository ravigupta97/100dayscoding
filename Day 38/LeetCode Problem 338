Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.

Example 1:

Input: 2
Output: [0,1,1]
Example 2:

Input: 5
Output: [0,1,1,2,1,2]
Follow up:

It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?
Space complexity should be O(n).
Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.






/*
Solved by initializing the value of 0 and 1 as these cases are repeated every where and traversing till num and calculating the ones in esch number
*/





class Solution {
public:
    vector<int> countBits(int num) {
        vector<int> output(num+1);
        if(num == 0)
            return output;
        
        output[0] = 0, output[1] = 1;
        for(int i=2; i<=num; i++){
            if(i & 1)
                output[i] = output[i/2] + 1;
            else
                output[i] = output[i/2];
        }
        return output;
    }
};
