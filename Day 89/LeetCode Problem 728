A self-dividing number is a number that is divisible by every digit it contains.

For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.

Also, a self-dividing number is not allowed to contain the digit zero.

Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.

Example 1:
Input: 
left = 1, right = 22
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
Note:

The boundaries of each input argument are 1 <= left <= right <= 10000.









/*
Solved by traversing the numbers from left till the value of right and check if the number is divisible by every number in the range of left and right and return the list of these numbers
*/









class Solution {
public:
    vector<int> selfDividingNumbers(int left, int right) {
        vector<int> result;
        for(int i = left; i <= right; i++){
            int temp = i;
            while(temp > 0){
                int digit = temp % 10;
                if(digit == 0 || (i % digit) != 0){
                    break;
                }
                temp /= 10;
            }
            if(temp == 0){
            result.push_back(i);
            }
        }
        return result;
    }
};
