Given an array of integers nums and a positive integer k, find whether it's possible to divide this array into sets of k consecutive numbers
Return True if its possible otherwise return False.

 

Example 1:

Input: nums = [1,2,3,3,4,4,5,6], k = 4
Output: true
Explanation: Array can be divided into [1,2,3,4] and [3,4,5,6].
Example 2:

Input: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3
Output: true
Explanation: Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11].
Example 3:

Input: nums = [3,3,2,2,1,1], k = 3
Output: true
Example 4:

Input: nums = [1,2,3,4], k = 3
Output: false
Explanation: Each array should be divided in subarrays of size 3.
 

Constraints:

1 <= nums.length <= 10^5
1 <= nums[i] <= 10^9
1 <= k <= nums.length







/*
Solved by traversing over the array and inserting elements into the map and checking if we can make array of k consecutive elements 
*/









class Solution {
public:
    bool isPossibleDivide(vector<int>& nums, int k) 
    {
        if(nums.size()%k != 0) 
            return false;
        
        int i, num, first_num;
        
        map<int,int> mp;
        for(i=0; i<nums.size(); i++)
            mp[nums[i]]++;
        
        while(mp.size()>0)
        {
            first_num = (mp.begin())->first;
            for(num = first_num; num < first_num+k; num++)
            {
                if(mp.find(num) == mp.end()) 
                    return false;
                
                mp[num]--;
                if(mp[num] == 0) mp.erase(num);
            }
        }
        return true;
    }
};
