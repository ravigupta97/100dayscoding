Given an integer array arr and an integer difference, return the length of the longest subsequence in arr which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals difference.

 

Example 1:

Input: arr = [1,2,3,4], difference = 1
Output: 4
Explanation: The longest arithmetic subsequence is [1,2,3,4].
Example 2:

Input: arr = [1,3,5,7], difference = 1
Output: 1
Explanation: The longest arithmetic subsequence is any single element.
Example 3:

Input: arr = [1,5,7,8,5,3,4,2,1], difference = -2
Output: 4
Explanation: The longest arithmetic subsequence is [7,5,3,1].
 

Constraints:

1 <= arr.length <= 10^5
-10^4 <= arr[i], difference <= 10^4






/*
Solved by calculating max and min element and then calculating range from that
and then while traversing the array map current index and check if diff index is in the rangeof array and return max length
*/





class Solution {
public:
    int longestSubsequence(vector<int>& arr, int difference) {
        int n = arr.size();
        int maxLen = 1;
        int maxValue = *max_element(arr.begin(),arr.end());
        int minValue = *min_element(arr.begin(),arr.end());
        
        int range = maxValue - minValue + 1;
        vector<int> dp(range, 0);
        int aIdx, dIdx;
        
        for(int i=0;i<n;i++){
            aIdx = arr[i]-minValue;
            dp[aIdx] = 1;
            dIdx = aIdx-difference;
            
            if(dIdx >= 0 and dIdx < range){
                dp[aIdx] = max(dp[aIdx], dp[aIdx]+dp[dIdx]);
                maxLen = max(maxLen, dp[aIdx]);
            }
        }
        return maxLen;
    }
};
