A subarray A[i], A[i+1], ..., A[j] of A is said to be turbulent if and only if:

For i <= k < j, A[k] > A[k+1] when k is odd, and A[k] < A[k+1] when k is even;
OR, for i <= k < j, A[k] > A[k+1] when k is even, and A[k] < A[k+1] when k is odd.
That is, the subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.

Return the length of a maximum size turbulent subarray of A.

 

Example 1:

Input: [9,4,2,10,7,8,8,1,9]
Output: 5
Explanation: (A[1] > A[2] < A[3] > A[4] < A[5])
Example 2:

Input: [4,8,12,16]
Output: 2
Example 3:

Input: [100]
Output: 1
 

Note:

1 <= A.length <= 40000
0 <= A[i] <= 10^9




/*
Solved by traversing the array from left to right and compare the adjectent elements and using -1,0,1 as symbol for <,=,> and finding the longest sequence for 1,-1,1,-1,1....
*/






class Solution {
public:
    int maxTurbulenceSize(vector<int>& A) {
        int n = A.size();
        int output = 1;
        int x = 0;
        for(int i=1;i<n;i++){
            int c = compare(A[i-1], A[i]);
            if(c == 0)
                x = i;
            else if(i == n-1 or c*compare(A[i], A[i+1]) != -1){
                output = max(output, i-x+1);
                x = i;
            }
        }
        return output;
    }
    
    int compare(int a, int b){
        if(a > b)
            return 1;
        else if(a < b)
            return -1;
        else if(a == b)
            return 0;
        
        return 0;
    }
};
