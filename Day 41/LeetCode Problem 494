You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.

Find out how many ways to assign symbols to make sum of integers equal to target S.

Example 1:

Input: nums is [1, 1, 1, 1, 1], S is 3. 
Output: 5
Explanation: 

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3

There are 5 ways to assign symbols to make the sum of nums be target 3.
 

Constraints:

The length of the given array is positive and will not exceed 20.
The sum of elements in the given array will not exceed 1000.
Your output answer is guaranteed to be fitted in a 32-bit integer.






/*
Solved by using the dynamic programming approach and assigning + to every number then use dp to determine how many combination of flips from + to - are there to reach S.
*/






class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int S) {
     int sum = 0;
     for (int n: nums) 
         sum += n;
     if (sum < S || (sum - S) % 2 == 1) 
         return 0;
     int target = (sum - S) / 2;

     vector<int> dp(target+1);
     dp[0] = 1;
     for (int i = 0; i < nums.size(); i++) {
        for (int j = target; j >= nums[i]; j--) {
             dp[j] += dp[j - nums[i]];
            }
        }
    return dp[target];
    }
};
