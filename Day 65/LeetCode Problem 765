N couples sit in 2N seats arranged in a row and want to hold hands. We want to know the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats.

The people and seats are represented by an integer from 0 to 2N-1, the couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2N-2, 2N-1).

The couples' initial seating is given by row[i] being the value of the person who is initially sitting in the i-th seat.

Example 1:

Input: row = [0, 2, 1, 3]
Output: 1
Explanation: We only need to swap the second (row[1]) and third (row[2]) person.
Example 2:

Input: row = [3, 2, 0, 1]
Output: 0
Explanation: All couples are already seated side by side.
Note:

len(row) is even and in the range of [4, 60].
row is guaranteed to be a permutation of 0...len(row)-1.







/*
Solved by traversing over the vector and checking if the num is even then swap them and store the count and return the minimum count
*/






class Solution {
public:
    int minSwapsCouples(vector<int>& row) {
        int n = row.size();
        int arr[n];
        for(int i=0; i<n; i++)
            arr[row[i]] = i;

        int ans = 0;
        for(int i=0; i<n; i+=2)
        {
            int num = row[i];
            if(num % 2 == 0 && row[i+1] - num != 1)
            {
                ans++;
                int temp, temp2;
                
                temp = row[i + 1];
                temp2 = arr[num + 1];

                row[i + 1] = num + 1;
                row[temp2] = temp;
    
                arr[num + 1] = i;
                arr[temp] = temp2;
            }
            else if(num % 2 == 1 && num - row[i+1] != 1)
            {
                ans++;
                int temp, temp2;
                
                temp = row[i + 1];
                temp2 = arr[num - 1];

                row[i + 1] = num - 1;
                row[temp2] = temp;
    
                arr[num - 1] = i;
                arr[temp] = temp2;
            }
        }
        return ans;
    }
};
