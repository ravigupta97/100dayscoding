Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
   



/*
Solved by using the fact that first element of preorder is the root of the tree and then finding the root value in inorder 
array left subtree is till the root element in inorder and similarly the right sub tree then arranging the tree
*/






/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(preorder.size() == 0 and inorder.size() == 0)
            return NULL;
        
        TreeNode* root = new TreeNode(preorder[0]);
        if(preorder.size() == 1)
            return root;
        int breakIndex = -1;
        for(int i=0;i<inorder.size();i++){
            if(inorder[i] == preorder[0]){
                breakIndex = i;
                break;
            }
        }
        
        vector<int> subLeftpre(preorder.begin()+1, preorder.begin()+breakIndex+1);
        vector<int> subLeftin(inorder.begin(), inorder.begin()+breakIndex);
        vector<int> subRightpre(preorder.begin()+breakIndex+1, preorder.end());
        vector<int> subRightin(inorder.begin()+breakIndex+1, inorder.end());
        
        root->left = buildTree(subLeftpre, subLeftin);
        root->right = buildTree(subRightpre, subRightin);
        
        return root;
    }
};
