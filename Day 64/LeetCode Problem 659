Given an array nums sorted in ascending order, return true if and only if you can split it into 1 or more subsequences such that each subsequence consists of consecutive integers and has length at least 3.

 

Example 1:

Input: [1,2,3,3,4,5]
Output: True
Explanation:
You can split them into two consecutive subsequences : 
1, 2, 3
3, 4, 5
Example 2:

Input: [1,2,3,3,4,4,5,5]
Output: True
Explanation:
You can split them into two consecutive subsequences : 
1, 2, 3, 4, 5
3, 4, 5
Example 3:

Input: [1,2,3,4,4,5]
Output: False
 

Constraints:

1 <= nums.length <= 10000








/*
Solved by creating a map and inserting all the elements of the array into it and while traversing the array check for the coditions and return accordingly
*/







class Solution {
public:
    bool isPossible(vector<int>& nums) {
        map<int,int>counts;
        map<int,int>tails;
        for(int n : nums)
            counts[n]++;
        
        for(int i : nums)
        {
            if(!counts[i])
                continue;
            counts[i]--;
            if(tails[i-1]>0)
            {
                tails[i-1]--;
                tails[i]++;
                
            }
            else if(counts[i+1] && counts[i+2])
            {
                counts[i+1]--;
                counts[i+2]--;
                tails[i+2]++;
            }
            else
                return false;
        }
        return true;
    }
};
