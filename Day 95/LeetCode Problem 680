Given a non-empty string s, you may delete at most one character. Judge whether you can make it a palindrome.

Example 1:
Input: "aba"
Output: True
Example 2:
Input: "abca"
Output: True
Explanation: You could delete the character 'c'.
Note:
The string will only contain lowercase characters a-z. The maximum length of the string is 50000.








/*
Solved by traversing the string from both end i.e. from the start and from the end and if both
the character in the string are not equal then check if string is palindrome or not and return accordingly
*/







class Solution {
public:
      bool isPal(string s,int i,int j){ 
        while(i<j){
            if(s[i]!=s[j]){
                return false;
                }
            i++;
            j--;
        }
        return true;
    }
     bool validPalindrome(string s) {
        int i=0;
        int j=s.length()-1;
        while(i<j){
            if(s[i]!=s[j]){
                return isPal(s,i+1,j) || isPal(s,i,j-1);    
                }
            i++;
            j--; 
        }
        return true;
    } 
};
