In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

 

Example 1:


Input: root = [1,2,3,4], x = 4, y = 3
Output: false
Example 2:


Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true
Example 3:



Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false
 

Constraints:

The number of nodes in the tree will be between 2 and 100.
Each node has a unique integer value from 1 to 100.





/*
Solved by using the Breadth first approach and checking the value of x and y is found in the tree or not
*/





/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isCousins(TreeNode* root, int x, int y) {
        queue<TreeNode*> q;
        q.push(root);
    
    while(!q.empty())
    {
        int size = q.size();
        bool foundX = false;
        bool foundY = false;
        
        for(int i=0;i<size;i++)
        {
            TreeNode* curr = q.front();
            q.pop();
            if(curr->val == x)
                foundX = true;
            if(curr->val == y)
                foundY = true;
            
            if(curr->left && curr->right)   
            {
                if((curr->left->val == x && curr->right->val == y) || (curr->left->val == y && curr->right->val == x))
                    return false;
            }
            
            if(curr->left)
                q.push(curr->left);
            
            if(curr->right)
                q.push(curr->right);
        }
        
        if(foundX && foundY)   
            return true;
    }
    
    return false;
}
};
