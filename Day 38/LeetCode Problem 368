Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies:

Si % Sj = 0 or Sj % Si = 0.

If there are multiple solutions, return any subset is fine.

Example 1:

Input: [1,2,3]
Output: [1,2] (of course, [1,3] will also be ok)
Example 2:

Input: [1,2,4,8]
Output: [1,2,4,8]






/*
Solved by sorting the array in ascending order and then finding the longest subsequence which follows a%b == 0 property for b<=a
*/






class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n = nums.size();
        vector<int> output;
        vector<int> dp(n,1);
        if(n == 0)
            return output;
        if(n == 1)
            return nums;
        
        sort(nums.begin(), nums.end());
        int max1 = 1;
        for(int i=1; i<n; i++){
            for(int j=0;j<i;j++){
                if(nums[i]%nums[j] == 0 and dp[j] >= dp[i])
                    dp[i] = dp[j]+1;
            }
            max1 = max(max1, dp[i]);
        }
        
        int k = n-1;
        while(max1 != 0){
            if(dp[k] == max1 and (output.empty() or output.back()%nums[k] == 0)){
                max1--;
                output.push_back(nums[k]);
            }
            k--;
        }
        return output;
    }
};
