Given two arrays, write a function to compute their intersection.

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Note:

Each element in the result should appear as many times as it shows in both arrays.
The result can be in any order.
Follow up:

What if the given array is already sorted? How would you optimize your algorithm?
What if nums1's size is small compared to nums2's size? Which algorithm is better?
What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?













/*
Solved by using the apprach that using the map count all the occurences of the number in the first array and
then while traversing the second array subtract the matching occurences and return the remaining vector
*/










class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        unordered_map<int, int> occurences;
        vector<int> result;
        
        for(int i = 0; i < nums1.size(); i++)
            occurences[nums1[i]]++;
        for(int i = 0; i < nums2.size(); i++) {
            if(occurences.count(nums2[i])) {
                occurences[nums2[i]]--;
                result.push_back(nums2[i]);
                if(occurences[nums2[i]] == 0)
                    occurences.erase(nums2[i]);
            }  
        }        
        return result;          
    }
};
