You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

Example:

Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7




/*
Solved by first copying the values of the lists in  two different vectors and then add the vetcors by traversing from the back and then store the output in another list 
*/





/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        vector<int> num1, num2;
        while(l1){
            num1.push_back(l1->val);
            l1 = l1->next;
        }
        while(l2){
            num2.push_back(l2->val);
            l2 = l2->next;
        }
        int sum = 0, carry = 0;
        ListNode *head = nullptr, *a = nullptr;
        for(int i = num1.size()-1, j = num2.size()-1; i>=0 or j>=0 or carry>0; i--,j--){
            sum = carry;
            if(i>=0){
                sum += num1[i];
            }
            if(j>=0)
                sum += num2[j];
            carry = sum/10;
            
            a = new ListNode(sum%10);
            a->next = head;
            head = a;
        }
        return head;
    }
};
