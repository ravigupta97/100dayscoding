Given a string S that only contains "I" (increase) or "D" (decrease), let N = S.length.

Return any permutation A of [0, 1, ..., N] such that for all i = 0, ..., N-1:

If S[i] == "I", then A[i] < A[i+1]
If S[i] == "D", then A[i] > A[i+1]
 

Example 1:

Input: "IDID"
Output: [0,4,1,3,2]
Example 2:

Input: "III"
Output: [0,1,2,3]
Example 3:

Input: "DDI"
Output: [3,2,0,1]
 

Note:

1 <= S.length <= 10000
S only contains characters "I" or "D".









/*
Solved by traversing over the string and checking for each character weather it is I or D and store it in the vector and then return it
*/








class Solution {
public:
    vector<int> diStringMatch(string S) {
        vector<int> permutation (S.length()+1,0);
        int a=0,b=S.length();
        for(int i=0; i<S.length(); i++){
            if(S[i]=='I')
                permutation[i]=a++;
            else
                permutation[i]=b--;
        }
        permutation[S.length()]=a;
        return permutation;
    }
};
